<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pagination</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <link rel="stylesheet" href="../../public/css/reviewsDashboard.css" />
    <!-- Add this in the <head> section of your HTML file -->
    <style>
      body{
        background-color: rgb(227, 150, 6);
      }
      #keyword{
        margin-top: 30px;
        margin-bottom: 50px;
      }
     #starFilter{
      margin-top:50px;
      margin-left:100px;
     }
     #sorting-options{
      margin-top:50px;
     }
      .reviews {
        max-width: 100%;
        background-color: #e5e1e1;
        padding: 20px;
        margin-left:100px;
        margin-right:100px;
        border-radius: 5px;
        margin-bottom: 20px;
        border: 1px solid #030303;
        transition: box-shadow 0.3s ease;
      }
      .reviews:hover {
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);
      }
      .title {
        font-size: 1.3rem;
        margin-bottom: 10px;
      }
      .content {
        font-size: 1rem;
        margin-bottom: 15px;
      }
      .star-rating {
        font-size: 1.2rem;
        text-align: right;
      }

      /* Pagination container */
#pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  list-style: none;
  padding: 0;
  margin: 20px 0;
  margin-bottom:20px;
  padding-bottom: 20px;
}

/* Pagination link */
#pagination a {
  color: #333;
  text-decoration: none;
  padding: 8px 12px;
  margin: 0 4px;
  border: 1px solid #ccc;
  border-radius: 4px;
  transition: background-color 0.3s ease;
}

/* Active page */
#pagination a.active {
  background-color: #007bff;
  color: #fff;
  border-color: #007bff;
}

/* Hover effect */
#pagination a:hover:not(.active) {
  background-color: #f2f2f2;
}

/* Disabled page links */
#pagination a.disabled {
  pointer-events: none;
  opacity: 0.5;
  cursor: default;
}
.navbar{
  background-color: rgb(38, 174, 232);
  height: 50px;
}
.logo{
  margin-left: 650px;
}

    </style>
  </head>
  <body>
    <nav class="navbar" role="navigation" aria-label="main navigation">
      <div class="navbar-brand">
        <a class="navbar-item" href="#">
          <img src="https://freepngimg.com/thumb/web_design/42851-3-cart-free-clipart-hd.png" class="logo" alt="E Commerce" width="60" height="60">
        </a>
        <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>
    </nav>
    <div class="container text-center">
      <div class="row">
        <div id="sorting-options" class="select is-rounded" class="col">
          <!-- <label for="sort-by">Sort By:</label> -->
          <select id="sort-by" onchange="handleSortChange()">
            <option value="rating">Sort By</option>
            <option value="rating">Rating</option>
            <option value="date">Date</option>
          </select>
        </div>
        <div id="starFilter" class="select is-rounded" class="col">
          <select id="rating-filter" onchange="handleFilterChange()">
            <option value="">All Ratings</option>
            <option value="4">4 stars or above</option>
            <option value="3">3 stars or above</option>
            <option value="2">2 stars or above</option>
            <option value="1">1 star or above</option>
          </select>
        </div>
        <div id="keyword" class="control" class="col">
          <label for="keyword-filter">Keyword:</label>
          <input
            class="input is-focused"
            type="text"
            id="keyword-filter"
            oninput="handleFilterChange()"
            placeholder="Enter a keyword"
          />
        </div>
      </div>
    </div>
    <!-- Sorting review on the basis of date and rating   -->
    <div id="sortingFiltering">
      <div id="filter-options">
        <!-- <label for="rating-filter">Rating:</label> -->
      </div>
    </div>
    <div id="review-list"></div>
    <%- include('partials/postreview') %>
    <div id="pagination"></div>

    <script>
      function handleSortChange() {
        const sortBy = document.getElementById("sort-by").value;
        console.log("sortBy value is :", sortBy);
        const url = new URL(window.location.href);
        url.searchParams.set("sortBy", sortBy);
        window.history.pushState({ sortBy }, "", url.toString());
        fetchSortedReviews(sortBy);
      }

      async function handleFilterChange() {
        const ratingFilter = parseInt(
          document.getElementById("rating-filter").value
        );
        const keywordFilter = document
          .getElementById("keyword-filter")
          .value.toLowerCase();
        const filteredReviews = await filterReviews(
          ratingFilter,
          keywordFilter
        );
        // console.log(filteredReviews);
        renderReviewList(filteredReviews);
      }

      // document.addEventListener("DOMContentLoaded", () => {
      async function fetchPaginatedReviews(page, pageSize) {
        try {
          // Fetch the paginated reviews from the backend based on the page and pageSize parameters
          const response = await fetch(
            `/api/reviewsdata?page=${page}&pageSize=${pageSize}`
          );
          const { reviewsList, totalPages } = await response.json();

          // Update the review list UI
          console.log(reviewsList);
          renderReviewList(reviewsList);
          // Render pagination links
          renderPagination(page, totalPages);
        } catch (error) {
          console.error(error);
          // Handle error
        }
      }
      function renderReviewList(reviewsList) {
        const reviewListElement = document.getElementById("review-list");
        reviewListElement.innerHTML = "";
        reviewsList.forEach((review) => {
          let reviewItem = document.createElement("div");
          reviewItem.classList.add("reviews");
          let reviewTitle = document.createElement("h3");
          reviewTitle.textContent = review.title;
          reviewTitle.classList.add("title");
          let reviewContent = document.createElement("p");
          reviewContent.classList.add("content");
          reviewContent.textContent = review.content;
          let reviewRating = document.createElement("div");
          reviewRating.classList.add("star-rating");
          reviewRating.textContent = review.rating;
          reviewItem.appendChild(reviewTitle);
          reviewItem.appendChild(reviewContent);
          reviewItem.appendChild(reviewRating);
          reviewListElement.appendChild(reviewItem);
        });
      }
      function renderPagination(page, totalPages) {
        const paginationElement = document.getElementById("pagination");
        paginationElement.innerHTML = "";
        // console.log(totalPages);
        for (let i = 1; i <= totalPages; i++) {
          const pageLink = document.createElement("a");
          pageLink.href = `?page=${i}`;
          pageLink.textContent = i;

          if (i === page) {
            pageLink.classList.add("active");
          }

          paginationElement.appendChild(pageLink);
        }
      }

      async function fetchSortedReviews(sortBy) {
        // Fetch the sorted reviews from the backend based on the sortBy parameter
        // console.log(sortBy);
        const response = await fetch(
          `/api/reviewsdata?sortBy=${sortBy}&page=${page}&pageSize=${pageSize}`
        );

        const { reviewsList } = await response.json();
        // Update the review list UI
        // console.log(reviewsList);
        renderReviewList(reviewsList);
      }

      // Adding fliter feature

      async function filterReviews(ratingFilter, keywordFilter) {
        const response = await fetch(`/api/reviewsFiltered`);
        const { reviewsList } = await response.json();
        const filteredReviews = reviewsList.filter((review) => {
          // Apply rating filter
          if (ratingFilter !== "" && review.rating < ratingFilter) {
            return false;
          }

          // Apply keyword filter
          if (keywordFilter !== "" && !review.content.includes(keywordFilter)) {
            return false;
          }

          return true;
        });

        return filteredReviews;
      }

      // Assuming you have an existing function to extract query parameters from the URL

      function getQueryParameter(page) {
        const params = new URLSearchParams(window.location.search);
        return params.get(page);
      }

      // Entry point
      // fetchSortedReviews("rating");
      var page = parseInt(getQueryParameter("page")) || 1;
      const pageSize = 5;

      fetchPaginatedReviews(page, pageSize);
      const pageLinks = document.querySelectorAll("#pagination a");

      pageLinks.forEach((pageLink) => {
        pageLink.addEventListener("click", (event) => {
          event.preventDefault();
          const page = parseInt(event.target.textContent);
          navigateToPage(page);
        });
      });

      function navigateToPage(page) {
        const url = new URL(window.location.href);
        url.searchParams.set("page", page);
        window.history.pushState({ page }, "", url.toString());

        fetchPaginatedReviews(page, pageSize);
      }
      // });
    </script>
    <!-- Add this before the closing </body> tag of your HTML file -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  </body>
</html>
